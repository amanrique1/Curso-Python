#https://wiki.python.org/moin/TimeComplexity
from collections import defaultdict
import sys

#------------------------------>List<------------------------------
#The list is mutable and ordered. It can contain a mix of different data types
myList=["María", "Pepe", True, 9526]
myList.append(2.8) #Adds the element into the last position
myList.insert(2,"Camila") #Adds the element into the specified position
myList.extend(["Ana", "Lucía"]) #Concat lists
print(myList[:])
print(myList[0])
print(myList.index("Ana"))
myList.remove("Ana") #Remove list element
myList.pop() #Removes the last element
print(myList[:])
print("Pepe" in myList) #Check if there is an element exists on the list
print(myList[-2]) #Return the second element starting from the last one
print(myList[1:3]) #Gets the elements from an initial to a final position
print(myList[1:]) #First to last position
print(myList[:3]) #First to 3 position

myList2=["Pedro", 49, False]
myList3= myList+myList2 #Another way to concat multiple lists
print(myList3[:])
myList2=["Pedro", 49, False] * 3 #The info is written 3 times

# Join is a string method that takes a list of strings as an argument,
# and returns a string consisting of the list elements joined by a separator string.

first_str = "\n".join(["What","is","your","favourite","painting","?"])
second_str = "-".join(["Who","is","your","favourite","artist","?"])

print(first_str)
print(second_str)
print("------------------------------------->Finished list prints<-------------------------------------")

#------------------------------>Tuple<------------------------------
#A tuple is another container. It is a data type for immutable ordered sequences of elements.
#Immutable because you can’t add and remove elements from tuples, or sort them in place.
myTuple=("Andres",1,12,1999,18)
name, day,month,year,age=myTuple
print(name)
print(day)
print(month)
print(year)
print(age)
print(myTuple.index("Andres"))
singElemTuple=("Pedro",) #One element tuple (we have to add the , IS NOT optional)
print(myTuple[2])
print("Juan" in myTuple)
print(myTuple.count(12))  #How many times is 12 on the tuple?
print(len(myTuple)) #Elements quantity

#Conversions
myList=list(myTuple)
myTuple=tuple(myList)
print("------------------------------------->Finished tuple prints<-------------------------------------")


#------------------------------>Set<------------------------------
#Set is a mutable and unordered collection of unique elements.
#It can permit us to remove duplicate quickly from a list.
fruits = {"apple", "banana", "cherry"}
print('grape' in fruits) # check if there is grape in the fruits set
fruits.add("orange")
fruits.update(["orange", "mango", "grapes"]) #adds many elements
numbers = [1, 2, 6, 3, 1, 1, 5]
unique_nums = set(numbers) #It can also receive a tuple
print(unique_nums)
unique_nums=unique_nums.union(fruits)
print(unique_nums)
fruits.remove("banana")
lastFruit = fruits.pop()
print(fruits)
fruits.clear()
print("------------------------------------->Finished set prints<-------------------------------------")

#------------------------------>Dictionary<------------------------------
#Dictionary is a mutable and unordered data structure.
#It permits storing a pair of items (i.e. keys and values).
myDictionary={"Italy":"Rome",10:"Messi","Semester":7} #The key and the values doesn't have to be from the same type
myDictionary["Italy"]="Milan"
print(myDictionary)
myDictionary["Italy"]=["Rome","Verona"]
print(myDictionary)
del myDictionary ["Semester"] #Delete value
print(myDictionary)
print(myDictionary[10])
print(myDictionary.keys())
print(myDictionary.values())
print(len(myDictionary))
#Default generator (more efficient) within the initialization you can declare the type of data to save by default (the said type does not have to be required)
Wdict = defaultdict(list)
Wdict["Italy"]=["Rome","Verona"]
print(Wdict)
print("------------------------------------->Finished dictionary prints<-------------------------------------")

#Structures generated by operations
#List generator
nums_cuad_list=[num**2 for num in range(1000)]
print(f"List size {sys.getsizeof(nums_cuad_list)}")
#Tuple generator
nums_cuad_tup=(num**2 for num in range(1000))
print(nums_cuad_tup)
print(f"Tuple size {sys.getsizeof(nums_cuad_tup)}")
print(next(nums_cuad_tup))